package com.example.demo.controller;

import com.example.demo.entity.CurrentUser;
import com.example.demo.entity.Reservation;
import com.example.demo.entity.User;
import com.example.demo.entity.terrain;
import com.example.demo.service.ReservationService;
import com.example.demo.service.UserService;
import com.example.demo.service.terrainService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.*;
import javafx.scene.layout.StackPane;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.List;

public class ReservationController {

    @FXML
    private ComboBox<String> terrainComboBox;

    @FXML
    private TextField startTimeField;

    @FXML
    private TextField endTimeField;

    @FXML
    private ComboBox<String> statusField;

    @FXML
    private Button submitButton;

    @FXML
    private Button backButton;

    @FXML
    private Label statusLabel;

    @FXML
    private ComboBox<String> userField;

    @FXML
    private Label userLabel;


    private final ReservationService reservationService = new ReservationService();
    private final terrainService terrainService = new terrainService();
    private final UserService userService = new UserService();

    private List<terrain> terrains; // Store the list of terrains
    private List<User> users;
    CurrentUser currentUser = CurrentUser.getInstance();

    @FXML
    public void initialize() {
        // Fetch all terrains from the database
        terrains = terrainService.getAllTerrains();
        users = userService.getAllUsers();

        // Populate ComboBox with terrain names
        ObservableList<String> terrainNames = FXCollections.observableArrayList(
                terrains.stream()
                        .map(terrain::getName)  // Extract the name property of each terrain
                        .toList()
        );

        // Set items in the ComboBox
        terrainComboBox.setItems(terrainNames);

        if (currentUser.getRole().equals("admin")) {
            ObservableList<String> statusNames = FXCollections.observableArrayList(
                    "pending",
                    "canceled",
                    "confirme"
            );
            statusField.setItems(statusNames);

        } else {
            ObservableList<String> statusNames = FXCollections.observableArrayList(
                    "pending"
            );
            statusField.setItems(statusNames);

            userField.setVisible(false);
            userLabel.setVisible(false);
            backButton.setVisible(false);
        }

        ObservableList<String> userNames = FXCollections.observableArrayList(
                users.stream()
                        .map(user -> String.valueOf(user.getId())) // Convert user IDs to Strings
                        .toList()
        );
        userField.setItems(userNames);
    }

    @FXML
    private void handleSubmitAction() {
        try {

            int userId = currentUser.getId();
            if (currentUser.getRole().equals("admin")) {
                userId = Integer.parseInt(userField.getValue());
            }

            // Get values from fields
            String terrainName = terrainComboBox.getValue();
            String startTimeText = startTimeField.getText();
            String endTimeText = endTimeField.getText();
            String status = statusField.getValue();

            // Validate terrain selection
            if (terrainName == null || terrainName.trim().isEmpty()) {
                statusLabel.setText("Error: Please select a terrain.");
                return;
            }

            // Find the terrain ID based on the selected name
            int terrainId = getTerrainIdFromName(terrainName);

            // Validate and parse start and end times
            LocalDateTime startTime = parseDateTime(startTimeText);
            LocalDateTime endTime = parseDateTime(endTimeText);

            if (endTime.isBefore(startTime)) {
                statusLabel.setText("Error: End time must be after start time.");
                return;
            }

            // Validate status
            if (status == null || status.trim().isEmpty()) {
                statusLabel.setText("Error: Status cannot be empty.");
                return;
            }

            // Create a Reservation object (ID is auto-generated by the database)
            Reservation reservation = new Reservation(0, startTime, endTime, userId, terrainId, status);

            // Call service to add reservation
            reservationService.addReservation(reservation);

            statusLabel.setText("Reservation added successfully!");
            statusField.cancelEdit();
            startTimeField.clear();
            endTimeField.clear();
            terrainComboBox.cancelEdit();

        } catch (DateTimeParseException e) {
            statusLabel.setText("Error: Invalid date/time format. Use yyyy-MM-ddTHH:mm.");
        } catch (Exception e) {
            statusLabel.setText("Error: Failed to add reservation.");
            e.printStackTrace();
        }
    }

    private LocalDateTime parseDateTime(String dateTimeText) {
        return LocalDateTime.parse(dateTimeText);
    }

    private int getTerrainIdFromName(String terrainName) {
        // Search for the selected terrain by name in the list of terrains
        for (terrain terrain : terrains) {
            if (terrain.getName().equals(terrainName)) {
                return terrain.getId();
            }
        }
        throw new IllegalArgumentException("Terrain not found: " + terrainName);
    }

    public void handleBackAction() {
        try {
            // Load the previous view (e.g., adminReservation-view.fxml)
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/demo/adminReservation-view.fxml"));
            Parent adminReservationView = loader.load();

            // Get the content pane from the dashboard
            StackPane contentPane = (StackPane) terrainComboBox.getScene().lookup("#contentPane");

            // Replace the current view in the content pane
            contentPane.getChildren().clear();
            contentPane.getChildren().add(adminReservationView);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
